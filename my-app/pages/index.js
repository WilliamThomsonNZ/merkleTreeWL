import Head from 'next/head'
import {useEffect ,useRef, useState} from "react"
import Web3Modal from "web3modal"
import {verifyOnWl} from "../merkleWLTree/merkle";
import {CONTRACT_ADDRESS, CONTRACT_ABI} from "../constants";
import { Contract, providers, utils } from "ethers";

export default function Home() {
  const web3ModalRef = useRef(null);
  const [walletConnected, setWalletConnected] = useState(false);

  async function connectWallet (){
    try {
      await getProviderOrSigner();
      setWalletConnected(true);
    } catch (err) {
      console.error(err);
    }
  };
  
 async function getProviderOrSigner(needSigner = false){
    const provider = await web3ModalRef.current.connect();
    const web3Provider = new providers.Web3Provider(provider);
    const { chainId } = await web3Provider.getNetwork();
    if (chainId !== 31337) {
      window.alert("Change the network to Localhost");
      throw new Error("Change network to localhost");
    }
    if (needSigner) {
      const signer = web3Provider.getSigner();
      return signer;
    }
    return web3Provider;
  };
  async function handleMintClick(){
    try{
      const signer =  await getProviderOrSigner(true);
      const signerAddress = await signer.getAddress();
      const {proof} = verifyOnWl(signerAddress.toString());
      const contract = new Contract(CONTRACT_ADDRESS, CONTRACT_ABI, signer);
      const mintTx = await contract.mintWhitelist(proof, {
        value: utils.parseEther("0.05")
      });
      await mintTx.wait();
    }catch(err){
      console.error(err);
    }
  }
  useEffect(() => {
    if(!walletConnected){
      web3ModalRef.current = new Web3Modal({
        network: "localhost",
        providerOptions: {},
        disableInjectedProvider: false,
      })
      connectWallet();
    }
  })
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
    <button onClick={e => handleMintClick(e)}>Mint Whitelist</button>
    </div>
  )
}
